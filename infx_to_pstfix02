#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<ctype.h>
#define max 100

typedef struct stack
{
    int top;
    char arr[max];
}STACK;

int isemtpy(STACK);
char stack_top( STACK ptr){
    return ptr.arr[ptr.top];
}

int isoperator(char ch){
    if(ch == '+'||ch == '-'||ch == '*'||ch == '/')
        return 1;
    else
        return 0;
}
int isempty(STACK s)
{
    if(s.top==-1)
     return 0;
    else
    return 1;
}
int precedence(char ch)
{
    if(ch == '*'||ch=='/')
        return 3;
    else if(ch=='+'||ch=='-')
        return 2;
    else if(ch=='(')
       return 0;
    
    
}

void push(STACK *ptr, char data)
{
    if(ptr->top == max-1)
    printf("Your STACK is Over-flowed\n");
    else
    {
        (ptr->top)++;
        ptr->arr[ptr->top] = data;
    }
}

char pop(STACK *ptr)
{
    char temp;
    if(ptr->top == -1)
    {
        printf("Your STACK is Empty\n");
       // return    -1;
    }
    else
    {
        // printf("The POPED Item is -->> %d and this was on %d INDEX\n",ptr->arr[ptr->top],ptr->top);
        temp =  ptr->arr[ptr->top];
        (ptr->top)--;
        return temp;
    }
}

void Infix_to_Postfix(char infix[], char postfix[])
{
    int i=0, j=0;
    char x;
    STACK p;
    p.top = -1;
    int l=strlen(infix);
    infix[l++]=')';
    infix[l]='\0';
    //strcat(infix,")");
    // puts(infix);
    push(&p,'(');
    
    while(isempty(p))
    {
        if(isalnum(infix[i]))
        {
                postfix[j++]=infix[i];
                //printf("%c",postfix[j-1])
        }
           
        if(infix[i]=='(')
        {
            push(&p,'(');
        }
        
        if(infix[i]==')')
        {
            while((x=pop(&p))!='(')
                postfix[j++] = x;
                
        }
        if(isoperator(infix[i]))
        {
                while(precedence(p.arr[p.top])>=precedence(infix[i]))
                    postfix[j++]=pop(&p);
                push(&p,infix[i]);
        }
        
        i++;
    }
    
    postfix[j]='\0';
}

int main(){
    
    char infix[max];
    char postfix[max];
    printf("Enter Your INFIX Expression\n");
    gets(infix);
    Infix_to_Postfix(infix,postfix);
    printf("%s\n",postfix);
    // Post_Evaluation(s,postfix);
}
